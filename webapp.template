{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template for VoteApp",
  "Parameters": {
    "S3BucketName": {
      "Description": "S3 bucket in which the static app will reside",
      "Type": "String",
      "MinLength": "3",
      "MaxLength": "63",
      "Default": "furikuri-votebucket"
    },
    "LambdaS3Bucket": {
      "Description": "Name of S3 bucket where Lambda function packages are stored.",
      "Type": "String",
      "Default": "furikuri-awslambda"
    },
    "LambdaReceiveS3Key": {
      "Description": "Name of S3 key for ZIP with Lambda function package that receives votes.",
      "Type": "String",
      "Default": "webapp/receive.zip"
    },
    "LambdaAggregateS3Key": {
      "Description": "Name of S3 key for ZIP with Lambda function package that aggregates votes.",
      "Type": "String",
      "Default": "webapp/aggregate.zip"
    },
    "VotesTableRead": {
      "Description": "Read capacity units for VoteApp DynamoDB table",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "4",
      "AllowedPattern": "[0-9]*",
      "Default": "1"
    },
    "VotesTableWrite": {
      "Description": "Write capacity units for VoteApp DynamoDB table",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "4",
      "AllowedPattern": "[0-9]*",
      "Default": "1"
    },
    "AggregatesTableRead": {
      "Description": "Read capacity units for VoteAppAggregates aggregates table",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "4",
      "AllowedPattern": "[0-9]*",
      "Default": "1"
    },
    "AggregatesTableWrite": {
      "Description": "Write capacity units for VoteAppAggregates aggregates table",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "4",
      "AllowedPattern": "[0-9]*",
      "Default": "1"
    }
  },
  "Resources": {
    "DynamoDBVoteTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "VotedFor",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "VotedFor",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": {
            "Ref": "VotesTableRead"
          },
          "WriteCapacityUnits": {
            "Ref": "VotesTableWrite"
          }
        },
        "TableName": "VoteApp",
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },
    "DynamoDBAggregatesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "VotedFor",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "VotedFor",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": {
            "Ref": "AggregatesTableRead"
          },
          "WriteCapacityUnits": {
            "Ref": "AggregatesTableWrite"
          }
        },
        "TableName": "VoteAppAggregates"
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "PublicRead",
        "BucketName": {
          "Ref": "S3BucketName"
        },
        "WebsiteConfiguration": {
          "IndexDocument": "index.html",
          "ErrorDocument": "error.html"
        }
      }
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "S3BucketPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadForGetBucketObjects",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Bucket"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "Bucket": {
          "Ref": "S3Bucket"
        }
      }
    },
    "LambdaVoteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "LambdaS3Bucket"
          },
          "S3Key": {
            "Ref": "LambdaReceiveS3Key"
          }
        },
        "Runtime": "nodejs4.3",
        "Description": "Receives votes from Twilio and adds to DynamoDB",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecDynamoRole",
            "Arn"
          ]
        },
        "Timeout": "30"
      }
    },
    "LambdaAggregateFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "LambdaS3Bucket"
          },
          "S3Key": {
            "Ref": "LambdaAggregateS3Key"
          }
        },
        "Runtime": "nodejs4.3",
        "Description": "Receives updated items from DynamoDB streams for aggregation",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecDynamoRole",
            "Arn"
          ]
        },
        "Timeout": "30"
      }
    },
    "EventSourceMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": "10",
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "DynamoDBVoteTable",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAggregateFunction",
            "Arn"
          ]
        },
        "StartingPosition": "TRIM_HORIZON"
      }
    },
    "LambdaExecDynamoRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "lambda_exec_role_voteapp",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiInvokeLmabda": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "api_gateway_invoke_fn",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ApiInvokeDynamoRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "api_gateway_dynamo",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "MyRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "A test API",
        "Name": "MyRestAPI"
      }
    },
    "PostVote": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "MyRestApi"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "MyRestApi",
            "RootResourceId"
          ]
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "Credentials": {
            "Fn::GetAtt": [
              "ApiInvokeLmabda",
              "Arn"
            ]
          },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "SelectionPattern": ".*",
              "StatusCode": "200"
            }
          ],
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaVoteFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    },

    "RequestItems": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "MyRestApi"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "MyRestApi",
            "RootResourceId"
          ]
        },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "Credentials": {
            "Fn::GetAtt": [
              "ApiInvokeDynamoRole",
              "Arn"
            ]
          },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "SelectionPattern": ".*",
              "StatusCode": "200"
            }
          ],
          "RequestTemplates" : {
            "application/json" : "{\"TableName\": \"VoteAppAggregates\",\"ReturnConsumedCapacity\": \"TOTAL\"}"
          },
          "Uri": "arn:aws:apigateway:eu-central-1:dynamodb:action/Scan"
        }
      }
    },

    "Deployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["PostVote", "RequestItems"],
      "Properties": {
        "RestApiId": {
          "Ref": "MyRestApi"
        },
        "Description": "My deployment",
        "StageName": "Prod"
      }
    }
  },
  "Outputs": {
    "WebsiteURL": {
      "Description": "URL for static website hosted on S3",
      "Value": {
        "Fn::GetAtt": [
          "S3Bucket",
          "WebsiteURL"
        ]
      }
    },
    "S3BucketSecureURL": {
      "Description": "Name of S3 bucket hosting content",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "S3Bucket",
                "DomainName"
              ]
            }
          ]
        ]
      }
    }
  }
}
